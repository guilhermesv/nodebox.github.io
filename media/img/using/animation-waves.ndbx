<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="0.9" type="file">
    <var name="canvasBackground" value="#0060adff"/>
    <node name="connect1" prototype="corevector.connect" x="210" y="30">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Transform, Path

def cook(self):
    if self.shape is None: return None
    if self.shape.pointCount < 2: return None
    start = self.shape.points[0]
    p = Path()
    p.moveto(start.x, start.y)
    for point in self.shape.points:
        p.lineto(point.x, point.y)
    #p.close()
    p.fillColor = self.fill
    if self.strokeWidth > 0:
        p.strokeColor = self.stroke
        p.strokeWidth = self.strokeWidth
    else:
        p.strokeColor = None
    return p.asGeometry()]]></value>
        </param>
        <param name="fill">
            <value>#00000000</value>
        </param>
        <param name="stroke">
            <value>#ffffffff</value>
        </param>
    </node>
    <node name="connect2" prototype="corevector.connect" x="210" y="110">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Transform, Path

def cook(self):
    if self.shape is None: return None
    if self.shape.pointCount < 2: return None
    start = self.shape.points[0]
    p = Path()
    p.moveto(start.x, start.y)
    for point in self.shape.points:
        p.lineto(point.x, point.y)
    #p.close()
    p.fillColor = self.fill
    if self.strokeWidth > 0:
        p.strokeColor = self.stroke
        p.strokeWidth = self.strokeWidth
    else:
        p.strokeColor = None
    return p.asGeometry()]]></value>
        </param>
        <param name="fill">
            <value>#00000000</value>
        </param>
        <param name="stroke">
            <value>#ffffffef</value>
        </param>
    </node>
    <node name="connect3" prototype="corevector.connect" x="210" y="190">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Transform, Path

def cook(self):
    if self.shape is None: return None
    if self.shape.pointCount < 2: return None
    start = self.shape.points[0]
    p = Path()
    p.moveto(start.x, start.y)
    for point in self.shape.points:
        p.lineto(point.x, point.y)
    #p.close()
    p.fillColor = self.fill
    if self.strokeWidth > 0:
        p.strokeColor = self.stroke
        p.strokeWidth = self.strokeWidth
    else:
        p.strokeColor = None
    return p.asGeometry()]]></value>
        </param>
        <param name="fill">
            <value>#00000000</value>
        </param>
        <param name="stroke">
            <value>#ffffffff</value>
        </param>
    </node>
    <node name="connect4" prototype="corevector.connect" x="210" y="270">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Transform, Path

def cook(self):
    if self.shape is None: return None
    if self.shape.pointCount < 2: return None
    start = self.shape.points[0]
    p = Path()
    p.moveto(start.x, start.y)
    for point in self.shape.points:
        p.lineto(point.x, point.y)
    #p.close()
    p.fillColor = self.fill
    if self.strokeWidth > 0:
        p.strokeColor = self.stroke
        p.strokeWidth = self.strokeWidth
    else:
        p.strokeColor = None
    return p.asGeometry()]]></value>
        </param>
        <param name="fill">
            <value>#00000000</value>
        </param>
        <param name="stroke">
            <value>#ffffffff</value>
        </param>
    </node>
    <node name="copy1" prototype="corevector.copy" x="120" y="30">
        <param name="copies">
            <value>200</value>
        </param>
        <param name="tx">
            <value>1.0</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
    </node>
    <node name="copy2" prototype="corevector.copy" x="120" y="110">
        <param name="copies">
            <value>200</value>
        </param>
        <param name="tx">
            <value>1.0</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
    </node>
    <node name="copy3" prototype="corevector.copy" x="120" y="190">
        <param name="copies">
            <value>200</value>
        </param>
        <param name="tx">
            <value>1.0</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
    </node>
    <node name="copy4" prototype="corevector.copy" x="210" y="370">
        <param name="copies">
            <value>100</value>
        </param>
        <param name="tx">
            <value>10.0</value>
        </param>
    </node>
    <node name="copy5" prototype="corevector.copy" x="210" y="450">
        <param name="copies">
            <value>100</value>
        </param>
        <param name="ty">
            <value>10.0</value>
        </param>
    </node>
    <node name="copy6" prototype="corevector.copy" x="120" y="270">
        <param name="copies">
            <value>200</value>
        </param>
        <param name="tx">
            <value>1.0</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
    </node>
    <node name="grid" prototype="corevector.merge" x="300" y="400"/>
    <node name="line1" prototype="corevector.line" x="120" y="370">
        <param name="x">
            <value>-500.0</value>
        </param>
        <param name="y">
            <value>-500.0</value>
        </param>
        <param name="angle">
            <value>90.0</value>
        </param>
        <param name="distance">
            <value>1000.0</value>
        </param>
        <param name="stroke">
            <value>#ffffff0a</value>
        </param>
    </node>
    <node name="line2" prototype="corevector.line" x="120" y="450">
        <param name="x">
            <value>-500.0</value>
        </param>
        <param name="y">
            <value>-500.0</value>
        </param>
        <param name="distance">
            <value>1000.0</value>
        </param>
        <param name="stroke">
            <value>#ffffff0a</value>
        </param>
    </node>
    <node name="merge1" prototype="corevector.merge" rendered="true" x="410" y="110"/>
    <node exported="true" name="point" prototype="corevector.generator" x="30" y="470">
        <description>Create a single point.</description>
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Path

def cook(self):
    p = Path()
    p.addPoint(self.x, self.y)
    # Return the path object.
    return p.asGeometry()]]></value>
        </param>
        <param name="x" type="float">
            <value>0.0</value>
        </param>
        <param name="y" type="float">
            <value>0.0</value>
        </param>
    </node>
    <node name="point1" prototype="point" x="30" y="30">
        <param name="y">
            <expression>wave(SINE, 0, 50, 100, stamp("CNUM", 0))</expression>
        </param>
    </node>
    <node name="point2" prototype="point" x="30" y="110">
        <param name="y">
            <expression>wave(TRIANGLE, 0, 50, 100, stamp("CNUM", 0)-25)</expression>
        </param>
    </node>
    <node name="point3" prototype="point" x="30" y="190">
        <param name="y">
            <expression>wave(SQUARE, 0, 50, 100, stamp("CNUM", 0))</expression>
        </param>
    </node>
    <node name="point4" prototype="point" x="30" y="270">
        <param name="y">
            <expression>wave(SAWTOOTH, 0, 50, 100, stamp("CNUM", 0)-25)</expression>
        </param>
    </node>
    <node name="transform1" prototype="corevector.transform" x="300" y="30">
        <param name="ty">
            <value>-130.0</value>
        </param>
    </node>
    <node name="transform2" prototype="corevector.transform" x="300" y="110">
        <param name="ty">
            <value>-60.0</value>
        </param>
    </node>
    <node name="transform3" prototype="corevector.transform" x="300" y="190">
        <param name="ty">
            <value>10.0</value>
        </param>
    </node>
    <node name="transform4" prototype="corevector.transform" x="300" y="270">
        <param name="ty">
            <value>80.0</value>
        </param>
    </node>
    <conn input="merge1" output="grid" port="shapes"/>
    <conn input="merge1" output="transform1" port="shapes"/>
    <conn input="merge1" output="transform2" port="shapes"/>
    <conn input="merge1" output="transform3" port="shapes"/>
    <conn input="connect1" output="copy1" port="shape"/>
    <conn input="copy1" output="point1" port="shape"/>
    <conn input="connect2" output="copy2" port="shape"/>
    <conn input="copy2" output="point2" port="shape"/>
    <conn input="connect3" output="copy3" port="shape"/>
    <conn input="copy3" output="point3" port="shape"/>
    <conn input="transform1" output="connect1" port="shape"/>
    <conn input="transform2" output="connect2" port="shape"/>
    <conn input="transform3" output="connect3" port="shape"/>
    <conn input="copy4" output="line1" port="shape"/>
    <conn input="copy5" output="line2" port="shape"/>
    <conn input="grid" output="copy4" port="shapes"/>
    <conn input="grid" output="copy5" port="shapes"/>
    <conn input="transform4" output="connect4" port="shape"/>
    <conn input="connect4" output="copy6" port="shape"/>
    <conn input="copy6" output="point4" port="shape"/>
    <conn input="merge1" output="transform4" port="shapes"/>
</ndbx>
